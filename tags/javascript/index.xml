<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Matt&#39;s Home</title>
    <link>/tags/javascript/</link>
    <description>Recent content in javascript on Matt&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Dec 2019 19:59:01 +0800</lastBuildDate>
    
	<atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What&#39;s New in ECMAScript 2020 (ES11)</title>
      <link>/posts/js/new-of-es2020/</link>
      <pubDate>Tue, 03 Dec 2019 19:59:01 +0800</pubDate>
      
      <guid>/posts/js/new-of-es2020/</guid>
      <description>&lt;p&gt;The latest draft of &lt;a href=&#34;https://tc39.es/ecma262/&#34;&gt;ECMAScript 2020&lt;/a&gt; was release on November 27 2019. All proposals in Stage 4 are included in this version of the language.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoughts of Data Bindings Strategies in React and Vue</title>
      <link>/posts/js/data-bindings-react-vue/</link>
      <pubDate>Tue, 13 Aug 2019 10:50:17 +0800</pubDate>
      
      <guid>/posts/js/data-bindings-react-vue/</guid>
      <description>Months ago, I started working for an enterprise which uses Vue.js for most of its web projects. The other day, I was trapped in a problem when I was trying to implement a checkbox-like component with Vue, for which I need to implement a two-way binding pattern(known as v-model). Were</description>
    </item>
    
    <item>
      <title>Useful JavaScript Snippets</title>
      <link>/posts/js/snippets01/</link>
      <pubDate>Wed, 24 Jul 2019 15:42:31 +0800</pubDate>
      
      <guid>/posts/js/snippets01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>StackOverflow 精选 - SSR vs Code Splitting</title>
      <link>/quotes/ssr-vs-code-splitting/</link>
      <pubDate>Fri, 12 Jul 2019 15:08:20 +0800</pubDate>
      
      <guid>/quotes/ssr-vs-code-splitting/</guid>
      <description>原文地址 The pros and cons of react ssr with code splitting and now React.Lazy I am slightly confused about the merits of ssr and code splitting and and code splitting done solely on the client. My thoughts are that server rendering the page first will lead to</description>
    </item>
    
    <item>
      <title>An Implementation for Limited-concurrency Promise Runner</title>
      <link>/posts/js/limited-concurrent-promise/</link>
      <pubDate>Sun, 23 Jun 2019 12:22:37 +0800</pubDate>
      
      <guid>/posts/js/limited-concurrent-promise/</guid>
      <description>Introduction When you call Promise.prototype.all(), there is no approach to controlling the number of concurrent promise tasks. This can cause a large usage of OS resources if the number of the tasks array is really large. There are some excellent packages aiming to solve this problem. For example, p-limit. p-limit</description>
    </item>
    
    <item>
      <title>You Might Not Know &#34;this&#34;</title>
      <link>/posts/js/you-might-not-know-this/</link>
      <pubDate>Fri, 21 Jun 2019 12:13:37 +0800</pubDate>
      
      <guid>/posts/js/you-might-not-know-this/</guid>
      <description>中文版请戳我 Motivation If you are familiar with React.js, you should know that if you add an event listener to an element like the following, you get a syntax error when you try triggering the click event. // JSX class Test extends React.Component { handleClick ()</description>
    </item>
    
    <item>
      <title>记忆化技术介绍</title>
      <link>/posts/js/memoize-react/</link>
      <pubDate>Mon, 18 Mar 2019 12:22:37 +0800</pubDate>
      
      <guid>/posts/js/memoize-react/</guid>
      <description>动机 在开发 React 项目中，有一种场景很常见：从服务器中请求了一个数据结构，这个结构非常复杂，甚至还有一些垃</description>
    </item>
    
  </channel>
</rss>